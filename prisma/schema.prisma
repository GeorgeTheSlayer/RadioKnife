// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @unique
  name        String        @unique
  username    String        @unique
  verified    Boolean       @default(false)
  session     Session[]
  Key         Key[]
  Forum       Thread[]
  FPost       Comment[]
  CommentLike CommentLike[]

  //Possible Fields for synths
  SynthProfile     synth_profile[]
  SynthProfileLike synth_profile_like[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model synth_profile {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  views Int      @default(0)
  ui    Json
  tags  String[]

  userId String
  User   User   @relation(fields: [userId], references: [id])

  likes synth_profile_like[]

  file_id    Int        @unique
  synth_file synth_file @relation(fields: [file_id], references: [id], onDelete: Cascade)
}

model synth_file {
  id   Int  @id @default(autoincrement())
  file Json

  synth_profile synth_profile?
}

model synth_profile_like {
  id Int @id @default(autoincrement())

  userId String
  User   User   @relation(fields: [userId], references: [id])

  synthProfileId Int
  SynthProfile   synth_profile @relation(fields: [synthProfileId], references: [id])
  //@@check(max(1, count(userId, SynthProfileLike.userId)))

  @@unique([userId, synthProfileId])
}

model Thread {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  Comment Comment[]
}

// Forum Posts
// Can be implmented into synths or forums
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  forumId Int
  Forum   Thread @relation(fields: [forumId], references: [id], onDelete: Cascade)

  parentId      Int?
  parent        Comment?      @relation("ChildComments", fields: [parentId], references: [id] )
  childComments Comment[]     @relation("ChildComments")
  CommentLike   CommentLike[]
}

model CommentLike {
  id   Int     @id @default(autoincrement())
  like Boolean @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  commentId Int
  Comment   Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)
  //@@check(max(1, count(userId, CommentLike.userId)))

  @@unique([userId, commentId])
}
