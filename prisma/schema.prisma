// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id       String    @id @unique
  name     String
  username String    @unique
  verified Boolean   @default(false)
  session  Session[]
  Key      Key[]
  Synths   Synth[]
  Forum    Thread[]
  FPost    Comment[]
  CommentLike CommentLike[]
  SynthProfile SynthProfile[]
  SynthProfileLike SynthProfileLike[]

  @@map("user")
}

model Session {
  id             String @id @unique
  user_id        String
  active_expires BigInt
  idle_expires   BigInt
  user           User   @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("session")
}

model Key {
  id              String  @id @unique
  hashed_password String?
  user_id         String
  primary         Boolean
  user            User    @relation(references: [id], fields: [user_id], onDelete: Cascade)

  @@index([user_id])
  @@map("key")
}

model Synth {
  id      Int     @id @default(autoincrement())
  title   String  @db.VarChar(255)
  content String  @db.VarChar(255)
  file    Json
  userId  String
  User    User    @relation(fields: [userId], references: [id])
  Thread   Thread[]
  SynthProfile SynthProfile[]

}

model SynthProfile {
  id      Int     @id @default(autoincrement())
  title   String  @db.VarChar(255)
  content String  @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ui      Json
  userId  String
  synthId Int
  User    User    @relation(fields: [userId], references: [id])
  Synth   Synth   @relation(fields: [synthId], references: [id])
  SynthProfileLike SynthProfileLike[]
  SynthProfileTags SynthProfileTags[]
}

model SynthProfileLike {
  id        Int      @id @default(autoincrement())
  like      Boolean  @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  synthProfileId Int
  SynthProfile   SynthProfile @relation(fields: [synthProfileId], references: [id])

  @@unique([userId, synthProfileId])
  //@@check(max(1, count(userId, SynthProfileLike.userId)))
}

model SynthProfileTags {
  id        Int      @id @default(autoincrement())
  tag       String   @db.VarChar(255)

  synthProfileId Int
  SynthProfile   SynthProfile @relation(fields: [synthProfileId], references: [id])

  @@unique([tag, synthProfileId])
}

model Thread {
  id        Int      @id @default(autoincrement())
  title     String   @db.VarChar(255)
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  synthId Int?
  Synth   Synth? @relation(fields: [synthId], references: [id])

  Comment Comment[]
}

// Forum Posts
// Can be implmented into synths or forums
model Comment {
  id        Int      @id @default(autoincrement())
  content   String   @db.VarChar(255)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  votes     Int      @default(0)

  userId String
  User   User   @relation(fields: [userId], references: [id], onDelete: Cascade)

  forumId Int
  Forum   Thread @relation(fields: [forumId], references: [id])

  parentId      Int?
  parent        Comment?  @relation("ChildComments", fields: [parentId], references: [id])
  childComments Comment[] @relation("ChildComments")
  CommentLike   CommentLike[]
}

model CommentLike {
  id        Int      @id @default(autoincrement())
  like      Boolean  @default(false)

  userId String
  User   User   @relation(fields: [userId], references: [id])

  commentId Int
  Comment   Comment @relation(fields: [commentId], references: [id])

  @@unique([userId, commentId])
  //@@check(max(1, count(userId, CommentLike.userId)))
}
